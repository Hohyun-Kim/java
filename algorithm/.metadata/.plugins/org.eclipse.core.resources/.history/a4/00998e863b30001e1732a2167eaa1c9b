package flatten;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Solution {

	public static void main(String[] args) throws NumberFormatException, IOException {
		
		BufferedReader br = new BufferedReader(new FileReader("./src/flatten/input.txt"));
		StringBuilder sb = new StringBuilder();
//		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		int[] boxes = new int[100];
		List<Integer>[] heights = new List[100];
		for (int i = 0; i < 100; i++) {
			heights[i] = new ArrayList<>();
		}
		int dump;
		int max;
		int min;
		int res;
		BufferedWriter bw = new BufferedWriter(new FileWriter("./src/flatten/output.txt"));
		for (int t = 1; t < 11; t++) {
			dump = Integer.parseInt(br.readLine());
			max = 0;
			min = 101;
			st = new StringTokenizer(br.readLine());
			for (int i = 0; i < 100; i++) {
				boxes[i] = Integer.parseInt(st.nextToken());
				heights[boxes[i]-1].add(Integer.valueOf(i));
				if (max < boxes[i]) {
					max = boxes[i];
				}
				if (min > boxes[i]) {
					min = boxes[i];
				}
			}
			
			
			while (dump > 0) {
				int max_box = heights[max-1].get(0);
				int min_box = heights[min-1].get(0);
				if( t == 3 && dump < 30) {
					sb.append("dump : " + dump + "\n");
					sb.append("now max_box : " + max_box + " and the value is " + max + "\n");
					sb.append("now min_box : " + min_box + " and the value is " + min + "\n");
				}
				heights[max-1].remove(0);
				heights[max-2].add(Integer.valueOf(max_box));
				heights[min-1].remove(0);
				heights[min].add(Integer.valueOf(min_box));
				boxes[max_box]--;
				boxes[min_box]++;
				
				if (heights[max-1].size() == 0) {
						
//						sb.append("now max : " + max);
					max--;
//						sb.append("decrease max");
//						sb.append("after max : " + max);
//						sb.append("after max_box : " + max_box);
//						sb.append("after value max_box : " + boxes[max_box]);
					if( t == 3 && dump < 30) {
						sb.append("decrease max" + "\n");
						sb.append("after max : " + max + "\n");
						sb.append("after max_box : " + max_box + "\n");
						sb.append("after value max_box : " + boxes[max_box] + "\n");
					}
				} else {
					if (t == 3 && dump < 30) {
						sb.append(heights[max-1] + "\n");
					}
				}
				if (heights[min-1].size() == 0) {
					min++;
					if( t == 3 && dump < 30) {
						sb.append("increase min" + "\n");
						sb.append("after min : " + min + "\n");
						sb.append("after min_box : " + min_box + "\n");
						sb.append("after value min_box : " + boxes[min_box] + "\n");
					}
//						sb.append("increase min");
				} else {
					if( t== 3 && dump < 30) {
						sb.append(heights[min-1] + "\n");
					}
				}
				dump--;
				if (max-min==0) {
					res = 0;
					break;
				}
				bw.append(sb);
				sb.delete(0, sb.length());
			}
			
			res = max - min;
			System.out.println("#" + t + " " + res);
		}
	}
}
